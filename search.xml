<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用Python保留表格原有样式, 修改指定内容</title>
    <url>/2021/02/04/20210204a/</url>
    <content><![CDATA[<p>在保留原有excel所有内容（包括背景色等样式）的前提下，对excel指定内容进行修改的方法。</p>
<a id="more"></a>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">openpyxl</span>==<span class="number">3</span>.<span class="number">0</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">pandas</span>==<span class="number">1</span>.<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Python</span>==<span class="number">3</span>.<span class="number">7</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">internal</span> packages: None</span><br></pre></td></tr></tbody></table></figure>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(excel_path, outpath)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 读、修改并写出</span></span><br><span class="line">    read_excel(excel_path, outpath)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 输入excel的绝对路径, 以xlsx结尾</span></span><br><span class="line">    excel_path = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 输出excel的绝对路径, 以xlsx结尾</span></span><br><span class="line">    outpath = <span class="string">""</span></span><br><span class="line">    main(excel_path, outpath)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="表格数据读取、处理和保存"><a href="#表格数据读取、处理和保存" class="headerlink" title="表格数据读取、处理和保存"></a>表格数据读取、处理和保存</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span>(<span class="params">excel_path, outpath</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    excel处理的主函数.</span></span><br><span class="line"><span class="string">    :param excel_path: excel输入的路径, string.</span></span><br><span class="line"><span class="string">    :param outpath: excel输出的路径, string.</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 读取和加载</span></span><br><span class="line">    pd_xls = pd.ExcelFile(excel_path)</span><br><span class="line">    wb = openpyxl.load_workbook(excel_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i_sh <span class="keyword">in</span> pd_xls.sheet_names:</span><br><span class="line">        <span class="comment"># 打印正在处理的sheet名称</span></span><br><span class="line">        print(i_sh)</span><br><span class="line">        sheet_bc = wb[i_sh]</span><br><span class="line">        df = pd_xls.parse(i_sh)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理过程</span></span><br><span class="line">        county_name = df.iloc[:, <span class="number">4</span>].tolist()</span><br><span class="line">        taibai_index = county_name.index(<span class="string">u"bbbb"</span>)</span><br><span class="line">        banma_index = county_name.index(<span class="string">u"cccc"</span>)</span><br><span class="line"></span><br><span class="line">        sheet_bc.cell(taibai_index + <span class="number">2</span>, <span class="number">13</span>).value = <span class="number">0</span></span><br><span class="line">        sheet_bc.cell(banma_index + <span class="number">2</span>, <span class="number">5</span>).value = <span class="string">u"aaaa"</span></span><br><span class="line">        sheet_bc.cell(banma_index + <span class="number">2</span>, <span class="number">4</span>).value = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存写出</span></span><br><span class="line">    wb.save(outpath)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>表格数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>高分辨率栅格提取低分辨率栅格的Python实现</title>
    <url>/2021/02/01/20210201a/</url>
    <content><![CDATA[<p>当你希望用高分辨率的<code>离散数据</code>提取低分辨率的<code>连续数据</code>，而你的设备无法将低分辨重采样至高分辨率或执行效率难以接受时，可以采用此方法。<br>1、示例中高分辨率数据（a）为类别变量，如植被类型、土壤类型等；<br>2、低分辨率数据（b）为连续变量，如降水、气温等；<br>3、我们循环遍历a数据的所有类别，每个类别涉及很多高分辨率的栅格，我们获取到所有索引并将之一一对应到b数据的索引上，即可免除重采样的繁琐步骤。</p>
<a id="more"></a>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">GDAL</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">numpy</span>==<span class="number">1</span>.<span class="number">16</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">Python</span>==<span class="number">2</span>.<span class="number">7</span>.<span class="number">14</span></span><br><span class="line"><span class="attribute">internal</span> packages: os, math</span><br></pre></td></tr></tbody></table></figure>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(h_p, l_p, out_p)</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 获取索引并保存</span></span><br><span class="line">    get_climate_index(h_p, l_p, out_p)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    <span class="comment"># 高分辨率栅格数据存放路径, 以tif结尾</span></span><br><span class="line">    high_resolution_raster_path = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 低分辨率栅格数据存放路径, 以tif结尾</span></span><br><span class="line">    low_resolution_raster_path = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 索引文件输出存放存放路径, 以txt结尾</span></span><br><span class="line">    outpath = <span class="string">""</span></span><br><span class="line">    main(high_resolution_raster_path, low_resolution_raster_path, outpath)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="栅格数据读取"><a href="#栅格数据读取" class="headerlink" title="栅格数据读取"></a>栅格数据读取</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readRaster_Geo</span>(<span class="params">rasterPath, bandN</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该函数读取栅格数据, 并返回栅格数据的地理坐标系统</span></span><br><span class="line"><span class="string">    :param rasterPath: 栅格数据的绝对路径, string</span></span><br><span class="line"><span class="string">    :param bandN: 要读取的波段, integer</span></span><br><span class="line"><span class="string">    :return: 栅格数据, np.array, 地理坐标系统, touple</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ds = gdal.Open(rasterPath)</span><br><span class="line">    data = ds.GetRasterBand(bandN).ReadAsArray()</span><br><span class="line">    <span class="comment"># 获取地理坐标系统</span></span><br><span class="line">    geoT = ds.GetGeoTransform()</span><br><span class="line">    <span class="keyword">del</span> ds</span><br><span class="line">    <span class="keyword">return</span> data, geoT</span><br></pre></td></tr></tbody></table></figure>
<h1 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_climate_index</span>(<span class="params">high_p, low_p, outpath</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param high_p: 高分辨率栅格数据文件路径, 以tif结尾, string</span></span><br><span class="line"><span class="string">    :param low_p: 低分辨率栅格数据文件路径, 以tif结尾, string</span></span><br><span class="line"><span class="string">    :param outpath: 输出路径, 以txt结尾, string</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 查看该文件是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(outpath):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取两个数据的地理和投影坐标系统</span></span><br><span class="line">        h_data, h_geo = readRaster_Geo(high_p, <span class="number">1</span>)</span><br><span class="line">        l_data, l_geo = readRaster_Geo(low_p, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取类别个数</span></span><br><span class="line">        hru_id_list = np.unique(h_data)</span><br><span class="line"></span><br><span class="line">        index_list = []</span><br><span class="line">        <span class="keyword">for</span> i_h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, hru_id_list + <span class="number">1</span>):</span><br><span class="line">            index_list_col = []</span><br><span class="line">            index_list_row = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取到高分辨率栅格索引</span></span><br><span class="line">            ih_list = <span class="built_in">list</span>(np.where(h_data == i_h))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 逐个进行坐标对应转换</span></span><br><span class="line">            <span class="keyword">for</span> i_h_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ih_list[<span class="number">0</span>])):</span><br><span class="line">                h_long = h_geo[<span class="number">0</span>] + ih_list[<span class="number">1</span>][i_h_index] * h_geo[<span class="number">1</span>] + <span class="number">0.50</span> * h_geo[<span class="number">1</span>]</span><br><span class="line">                h_lat = h_geo[<span class="number">3</span>] + ih_list[<span class="number">0</span>][i_h_index] * h_geo[<span class="number">5</span>] + <span class="number">0.50</span> * h_geo[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">                l_row = <span class="built_in">int</span>(math.ceil((h_lat - l_geo[<span class="number">3</span>]) / l_geo[<span class="number">5</span>]))</span><br><span class="line">                l_col = <span class="built_in">int</span>(math.ceil((h_long - l_geo[<span class="number">0</span>]) / l_geo[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">                index_list_row.append(l_row)</span><br><span class="line">                index_list_col.append(l_col)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打印出进度</span></span><br><span class="line">            print(i_h)</span><br><span class="line">            <span class="comment"># 行列保存在同一行中, 采用"-"分割, 行尾增加换行符</span></span><br><span class="line">            index_list.append(<span class="built_in">str</span>(index_list_row) + <span class="string">"-"</span> + <span class="built_in">str</span>(index_list_col) + <span class="string">"\r\n"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 写出</span></span><br><span class="line">        write2txt(outpath, index_list)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="文本保存"><a href="#文本保存" class="headerlink" title="文本保存"></a>文本保存</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write2txt</span>(<span class="params">fileName, data</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    保存列表数据至文本文件</span></span><br><span class="line"><span class="string">    :param fileName: 绝对路径名称, string</span></span><br><span class="line"><span class="string">    :param data: 数据列表, list</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = <span class="string">''</span>.join(data)</span><br><span class="line">    <span class="comment"># 因列表存在"["和"]", 故此处增加一步替换的过程</span></span><br><span class="line">    s = s.replace(<span class="string">"["</span>, <span class="string">""</span>).replace(<span class="string">']'</span>, <span class="string">''</span>)</span><br><span class="line">    s = s.replace(<span class="string">" "</span>, <span class="string">""</span>)</span><br><span class="line">    fp = file(fileName, <span class="string">'w'</span>)</span><br><span class="line">    fp.write(s)</span><br><span class="line">    fp.close()</span><br><span class="line">    print(<span class="string">"The file was written out successfully!"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>GDAL</tag>
        <tag>栅格数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Python地学数据处理</title>
    <url>/2021/01/29/20210129a/</url>
    <content><![CDATA[<p>利用 <strong>Python</strong> 地学数据处理模块 <code>GDAL</code><br>实现:（1）读取栅格数据;（2）对栅格数据进行处理;（3）保存生成新的栅格数据。</p>
<a id="more"></a>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">GDAL</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">numpy</span>==<span class="number">1</span>.<span class="number">16</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">Python</span>==<span class="number">2</span>.<span class="number">7</span>.<span class="number">14</span></span><br><span class="line"><span class="attribute">internal</span> packages: os, sys</span><br></pre></td></tr></tbody></table></figure>
<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight nix"><table><tbody><tr><td class="code"><pre><span class="line">def main(input_p, output_p):</span><br><span class="line">    <span class="comment"># 读取</span></span><br><span class="line">    data, geoT, <span class="attr">proj</span> = readRaster_Geo_Prj(input_p)</span><br><span class="line">    <span class="comment"># 处理</span></span><br><span class="line">    <span class="attr">data1</span> = deal_raster(data)</span><br><span class="line">    <span class="comment"># 获取数组行列数</span></span><br><span class="line">    rows, <span class="attr">cols</span> = data1.shape</span><br><span class="line">    <span class="comment"># 写出</span></span><br><span class="line">    writeRaster(data, output_p, cols, rows, <span class="number">1</span>, geoT, proj)</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == '__main__':</span><br><span class="line">    <span class="comment"># 栅格数据路径</span></span><br><span class="line">    <span class="attr">input_path</span> = <span class="string">""</span></span><br><span class="line">    <span class="comment"># 栅格输出路径, 以.tif或.img结尾</span></span><br><span class="line">    <span class="attr">output_path</span> = <span class="string">""</span></span><br><span class="line">    programe_info()</span><br><span class="line">    main(input_path, output_path)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="栅格数据读取"><a href="#栅格数据读取" class="headerlink" title="栅格数据读取"></a>栅格数据读取</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readRaster_Geo_Prj</span>(<span class="params">rasterPath, bandN=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    读取栅格数据，返回栅格数组，栅格地理坐标系统和投影坐标系统</span></span><br><span class="line"><span class="string">    :param rasterPath: 栅格数据绝对路径, string.</span></span><br><span class="line"><span class="string">    :param bandN: 波段数, integer.</span></span><br><span class="line"><span class="string">    :return: 栅格数据数组, 地理坐标系统, 投影坐标系统</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ds = gdal.Open(rasterPath)</span><br><span class="line">    data = ds.GetRasterBand(bandN).ReadAsArray()</span><br><span class="line">    geoT = ds.GetGeoTransform()</span><br><span class="line">    prj = ds.GetProjection()</span><br><span class="line">    <span class="keyword">del</span> ds</span><br><span class="line">    <span class="keyword">return</span> data, geoT, prj</span><br></pre></td></tr></tbody></table></figure>
<h1 id="栅格数据处理"><a href="#栅格数据处理" class="headerlink" title="栅格数据处理"></a>栅格数据处理</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_raster</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对数组数据进行处理</span></span><br><span class="line"><span class="string">    :param data: 数组数据, np.array.</span></span><br><span class="line"><span class="string">    :return: data1: 处理后的栅格数据, np.array.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 栅格数据扩大两倍</span></span><br><span class="line">    data1 = data * <span class="number">2</span></span><br><span class="line">    <span class="comment"># 设定背景值为空, 注此语句仅适合浮点型</span></span><br><span class="line">    data1[data1 == data1[<span class="number">0</span>, <span class="number">0</span>]] = np.nan</span><br><span class="line">    <span class="comment"># 打印数据空间平均值</span></span><br><span class="line">    print(np.nanmean(data1))</span><br><span class="line">    <span class="comment"># 打印数据空间最大值</span></span><br><span class="line">    print(np.nanmax(data1))</span><br><span class="line">    <span class="comment"># 打印数据空间最小值</span></span><br><span class="line">    print(np.nanmin(data1))</span><br><span class="line">    <span class="comment"># 打印数据空间累和值</span></span><br><span class="line">    print(np.nansum(data1))</span><br><span class="line">    <span class="keyword">return</span> data1</span><br></pre></td></tr></tbody></table></figure>
<h1 id="栅格数据保存输出"><a href="#栅格数据保存输出" class="headerlink" title="栅格数据保存输出"></a>栅格数据保存输出</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeRaster</span>(<span class="params">data, outpath_file, cols, rows, bands_num, geoTtansform, projection</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    此函数模块实现栅格数据的写出工作</span></span><br><span class="line"><span class="string">    :param data: 栅格数组数据, np.array.</span></span><br><span class="line"><span class="string">    :param outpath_file: 绝对输出路径, 以.tif或.img结尾, string.</span></span><br><span class="line"><span class="string">    :param cols: 栅格数组的列数, integer.</span></span><br><span class="line"><span class="string">    :param rows: 栅格数组的行数, integer.</span></span><br><span class="line"><span class="string">    :param bands_num: 栅格数组的维数, 必须与data保持一致, integer.</span></span><br><span class="line"><span class="string">    :param geoTtansform: 地理坐标系统, touple.</span></span><br><span class="line"><span class="string">    :param projection: 投影坐标系统, string.</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># get band data type</span></span><br><span class="line">    <span class="keyword">if</span> bands_num == <span class="number">1</span>:</span><br><span class="line">        data_tmp = data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_tmp = data[<span class="number">0</span>, :, :]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'int8'</span> <span class="keyword">in</span> data_tmp.dtype.name:</span><br><span class="line">        datatype = gdal.GDT_Byte</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'int16'</span> <span class="keyword">in</span> data_tmp.dtype.name:</span><br><span class="line">        datatype = gdal.GDT_UInt16</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        datatype = gdal.GDT_Float32</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># get data driver type</span></span><br><span class="line">    basename = os.path.basename(outpath_file).split(<span class="string">"."</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> basename == <span class="string">"tif"</span>:</span><br><span class="line">        driver_name = <span class="string">"GTiff"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">"The parameter outpath_file must be end of \".tif\" or \".img\"!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># save tiff to the outpath_file</span></span><br><span class="line">    outdrv = gdal.GetDriverByName(driver_name)</span><br><span class="line">    outdat = outdrv.Create(outpath_file, cols, rows, bands_num, datatype, [<span class="string">"COMPRESS=DEFLATE"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> outdat <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    outdat.SetGeoTransform(geoTtansform)</span><br><span class="line">    outdat.SetProjection(projection)</span><br><span class="line">    <span class="keyword">if</span> bands_num &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bands_num):</span><br><span class="line">            outdat.GetRasterBand(i + <span class="number">1</span>).WriteArray(data[i, :, :])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outdat.GetRasterBand(<span class="number">1</span>).WriteArray(data)</span><br><span class="line">    outdat = <span class="literal">None</span></span><br><span class="line">    print(<span class="string">"Data has already be write to %s"</span> % outpath_file)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>GDAL</tag>
        <tag>地学数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC系统Dock中应用程序图标丢失的解决办法</title>
    <url>/2021/01/28/20210127a/</url>
    <content><![CDATA[<p>当你的 <strong>Mac</strong> <code>launchpad</code>图标丢失时…</p>
<a id="more"></a>

<h1 id="再次添加"><a href="#再次添加" class="headerlink" title="再次添加"></a>再次添加</h1><p>在 <strong>Finder</strong> 窗口右上角的搜索框中输入 <code>launchpad</code> 关键字，再把图标拖到<strong>Dock</strong>中。</p>
<h1 id="采用快捷方式"><a href="#采用快捷方式" class="headerlink" title="采用快捷方式"></a>采用快捷方式</h1><p>在触摸板上合拢4指，即可显示应用程序列表（即快速启动板：<code>launchpad</code>）。</p>
]]></content>
      <categories>
        <category>系统</category>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>launchpad</tag>
      </tags>
  </entry>
  <entry>
    <title>递归遍历指定文件夹下某一类型的文件</title>
    <url>/2021/01/28/20210128a/</url>
    <content><![CDATA[<p>递归遍历某一路径下所有指定格式的文件, 以列表形式返回文件完整路径。</p>
<a id="more"></a>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8-*-</span></span><br><span class="line"><span class="attribute">python</span>==<span class="number">2</span>.<span class="number">7</span>.<span class="number">14</span></span><br><span class="line"><span class="attribute">internal</span> packages: os</span><br></pre></td></tr></tbody></table></figure>
<h1 id="递归遍历文件夹函数"><a href="#递归遍历文件夹函数" class="headerlink" title="递归遍历文件夹函数"></a>递归遍历文件夹函数</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dirlist</span>(<span class="params">path, filelist, dataformat</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 遍历给定文件夹下特定格式的文件，并保存文件名返回</span></span><br><span class="line"><span class="string">    :param path: 路径</span></span><br><span class="line"><span class="string">    :param filelist: 存放文件名的列表</span></span><br><span class="line"><span class="string">    :param dataformat: 数据格式（tif, hdf, asc, etc.）</span></span><br><span class="line"><span class="string">    :return: 此目录下指定格式的文件名列表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    C_files = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> C_files:</span><br><span class="line">        newfile = os.path.join(path, file)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(newfile):</span><br><span class="line">            dirlist(newfile, filelist, dataformat)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">".%s"</span> % dataformat):</span><br><span class="line">                filelist.append(newfile)</span><br><span class="line">    <span class="keyword">return</span> filelist</span><br></pre></td></tr></tbody></table></figure>
<h1 id="定义主函数"><a href="#定义主函数" class="headerlink" title="定义主函数"></a>定义主函数</h1><figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">def main(<span class="built_in">path</span>):</span><br><span class="line">    file_list = dirlist(<span class="built_in">path</span>, [], <span class="string">"tif"</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    # 待查询路径</span><br><span class="line">    <span class="built_in">path</span> = <span class="string">""</span></span><br><span class="line">    main(<span class="built_in">path</span>)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>程序开发</tag>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>黄土高原生态系统承载力系统设计</title>
    <url>/2021/01/21/20210121a/</url>
    <content><![CDATA[<div>
    <table style="margin-left: auto; margin-right: auto;">
        <tbody><tr>
            <td style="">
                <!--左侧内容-->
                <img src="/images/abstract/0001.png" width="450px" height="150px">
            </td>
            <td>
                <!--右侧内容-->
                The system has four modules with an region overview functiona-lity, which contains base datasets selection, process parameter configuration, spatialtemp-oral analysis and scenario simulation.
            </td>
        </tr>
    </tbody></table>
</div>
<a id="more"></a>

<h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><h2 id="FRAMEWORK"><a href="#FRAMEWORK" class="headerlink" title="FRAMEWORK"></a>FRAMEWORK</h2><p>  <strong>ECCAS</strong>( <strong>E</strong>cosystem <strong>C</strong>arrying <strong>C</strong>apicity <strong>A</strong>ssessment <strong>S</strong>ystem) has a full graphical user interface (GUI) functionality and runs on Microsoft Windows operating systems. The system has four modules with an region overview functiona-lity, which contains base datasets selection, process parameter configuration, spatialtemp-oral analysis and scenario simulation. Precipitation and social-economic water are two vital factors that affect the ecosystem carrying capacity. Region overview shows us the ev-aluation results of history and future ecosystem carrying capacity directly, and according to different geomorphological types, we can find out whether different regions are overloa-ded or not.</p>
<div align="center">
    <img src="/2021/01/21/20210121a/figure1.jpg" width="600" alt="figure1">
</div>

<p>  ECCAS is coded in Python, Matlab, Scala and JavaScript based on the Linux operating system. All models and data are encapsulated in the bottom framework. For interacting with geospatial files, ECCAS uses the Geospatial Data Abstraction Library (GDAL, 2015) for raster and vector handling. The related models are accessed by ECCAS via the python API. Base data selection can be accessed from a series of drop down menus, from live ‘radio-buttons’, or from toolbars embedded in the user interface, which means that users can circumvent use of the drop down menu system. Selecting the suite of radio buttons and toolbars is performed by clicking the respective active area of the screen with the mouse. In summary, ECCAS is designed to achieve communication, persistence and accessibility merits in terms of platform independence, as well as model sharing, high performance computing and dynamic visualization capabilities.</p>
<div align="center">
    <img src="/2021/01/21/20210121a/figure2.jpg" width="600" alt="figure2">
</div>

<h2 id="FUNCTION"><a href="#FUNCTION" class="headerlink" title="FUNCTION"></a>FUNCTION</h2><h3 id="HOMEPAGE"><a href="#HOMEPAGE" class="headerlink" title="HOMEPAGE"></a>HOMEPAGE</h3><p><strong>  This module is the integration of social and economic water consumption, precipitation, NDVI, GPP, the carrying capacity of ecological system related information or preliminary results.</strong></p>
<ul>
<li><p><strong>Precipitation</strong></p>
<ul>
<li>Brief introduction of precipitation.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The precipitation spatial pattern of this period.</li>
</ul>
</li>
<li><p><strong>SEWD</strong></p>
<ul>
<li>Brief introduction of Social Economic Water.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The spatial pattern of this period.</li>
</ul>
</li>
<li><p><strong>NDVI</strong></p>
<ul>
<li>Brief introduction of NDVI.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The spatial pattern of this period.</li>
</ul>
</li>
<li><p><strong>GPP</strong></p>
<ul>
<li>Brief introduction of GPP.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The spatial pattern of this period.</li>
</ul>
</li>
<li><p><strong>ECC</strong></p>
<ul>
<li><strong>ECC</strong><ul>
<li>Brief introduction of Ecosystem Carrying Capacity.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The spatial pattern of this period.</li>
<li><code>Relationship</code> : The relationship between ECC and Precipitation.</li>
</ul>
</li>
<li><strong>W (GPP/ECC)</strong><ul>
<li>Brief introduction of W.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The spatial pattern of this period.</li>
<li><code>Percentage</code> : The percentage of w for different in LP countys. </li>
</ul>
</li>
<li><strong>GPP-ECC</strong><ul>
<li>Brief introduction of GPP subtract ECC.</li>
<li><code>Sequence</code> : Time sequence of rainfall between start year and end year, including six geomorphic regions of the Loess Plateau and LP.</li>
<li><code>Pattern</code> : The spatial pattern of this period.</li>
</ul>
</li>
<li><strong>Region Statistic</strong><ul>
<li>Different region statistc results, include LP/County/Geomorphic Zone/Ecological Zone/Brain.</li>
<li>The percentage of different status(overload w &gt; 1, not overload w &lt; 0.75, will overload 0.75 &lt; w &lt; 1).</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="BASEDATA"><a href="#BASEDATA" class="headerlink" title="BASEDATA"></a>BASEDATA</h3><p><strong>  In addition to the assessment of ecosystem carrying capacity, ECCAS also integrates a large number of different types of basic data for users to query, statistics and analysis that felicitates the decision efficiency of stakeholders and decision makers at different levels.These base datasets comprise meteorological data, hydrological data, vegetation data, land use data and socio-economic water use data.</strong></p>
<ul>
<li><p><strong>Hydrology Site Data</strong></p>
<ul>
<li>Click on the site(red triangle), on the site of the runoff and sediment deep query data, time sequence (right 1).</li>
<li>runoff and sediment data are entered into ECCAS perform <a href="https://www.xlstat.com/en/solutions/features/mann-kendall-trend-tests">Mann-Kendall</a> test analysis(right 2).</li>
<li>correlation analysis（right 3）. </li>
</ul>
</li>
<li><p><strong>Meteorological Data</strong></p>
<ul>
<li>The daily meteorological data (1982-2012) of 79 stations located on and around the Loess Plateau, including precipitation, air temperature, relative humidity, wind speed , sunshine duration,etc., were analyzed by ECCAS. </li>
<li>When the user clicks <code>More</code> button,  analysis results of all meteorological elements will show on a pops up window. </li>
</ul>
</li>
<li><p><strong>Hydrology</strong></p>
<ul>
<li>Different products of evapotranspiration data carousel on the map, including the spatial pattern and slope products, the upper right corner of the show is: scene schema spatial pattern/slope.</li>
<li>The top-down analysis of evapotranspiration data of different products of the time series, the Loess Plateau six physiognomy spatial pattern analysis, and NDVI/LAI/ precipitation (<code>Pre</code>) /average temperature(<code>Tem</code>) / relative humidity (<code>RH</code>) correlation.</li>
</ul>
</li>
<li><p><strong>Vegetation Data</strong></p>
<ul>
<li>Different products of LAI data carousel on the map, including the spatial pattern and slope products, the upper right corner of the show is: scene schema spatial pattern/slope..</li>
<li>The top-down analysis of LAI data of different products of the time series, the Loess Plateau six physiognomy spatial pattern analysis, and NDVI/evapotranspiration(<code>ET</code>)/ precipitation (<code>Pre</code>)/average temperature(<code>Tem</code>)/relative humidity(<code>RH</code>) correlation.</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Land Use</strong> </p>
<ul>
<li>the results of land use change in different regions of the Loess Plateau are shown on the map every five years. </li>
</ul>
</li>
<li><p><strong>Social Data</strong></p>
<ul>
<li>When users want to understand the relationship between the number of all kinds of social phenomena and the development law of social-economic phenomena, they can complete the analysis of the relationship between population and Social in different regions by clicking <code>Social</code> option button.</li>
</ul>
</li>
<li><p><strong>Carrying Capicity Data</strong></p>
<ul>
<li>The bearing capacity of data management, users and ordinary users are calculated based on the query.</li>
<li>Select the calculation task, choose again analysis and display of data set, the user can see the data carousel on the map display, historical data interval is 5 years.</li>
<li>The user can choose the right below the area of region query and statistical analysis, display, there are two ways of inquiry:<ul>
<li>The mouse mobile query, including:<code>Scio-Eco water use</code>、<code>Precipitation</code>、<code>GPP</code>、<code>Carry Capicity</code>、<code>Carry Capicity (w)</code> and <code>Overload or not</code>.</li>
<li>The mouse click query, the time sequence of the selected region of the data set under the above variables.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="PROCESS-PARAMETER"><a href="#PROCESS-PARAMETER" class="headerlink" title="PROCESS PARAMETER"></a>PROCESS PARAMETER</h3><ul>
<li><p><strong>LP-VI Model</strong></p>
<ul>
<li><p>the ET and GPP are estimated by the LP-VI and TURC model, respectively, based on basic raster data, e.g. <a href="https://en.wikipedia.org/wiki/Leaf_area_index">Leaf area index</a>, precipitation and temperature (<code>tab 1</code>).</p>
</li>
<li><p>and related empirical parameters, e.g. minimum stomatal resistance and maximum light use efficiency (<code>tab 2</code>). </p>
</li>
<li><p>The initial and final date of modeling are acquiescently set to the first and last days of measured LAI data. When the two models run are finished, two new function of Analysis and Save will be displayed. The former shows the magnitude and trend of ET and GPP in terms of their spatial patterns and different biomes. Users can download the produced figures by clicking the Save button. </p>
</li>
</ul>
</li>
<li><p><strong>LPCC Model</strong></p>
<ul>
<li><p>Then (<code>tabs 3 and 4</code>), the relationship between the above modeled ET and GPP are determined based on different periods, precipitation gradient, vegetation and geomorphologies types (regionalization selection can be single or multiple elections). </p>
</li>
<li><p>Users can check the fitness of regionalization through two important indicators of coefficient of determination (R<sup>2</sup>) and p-value. It should be noted that other ET and GPP products (e.g., MODIS and MTE products) are alternative if users are not willing to run the above two models with the local driving datasets. </p>
</li>
<li><p>Finally (<code>tab 5</code>), the water demand for socio-economic development is calculated. Based on precipitation and the water demand of human society, the ECC assessment during corresponding period has been achieved.</p>
</li>
<li><p>Users can view the configuration of social and economic water consumption，click <code>Ratio of socio-eco water</code>,the future configuration changes include the provinces, and contrast between them.</p>
</li>
<li><p>Users can click the <code>Region Statistic</code> button to display the regional statistical of results, and move the mouse directly query and map interaction. And users also can click the resion name in form to check the details in this region about precipitation/SEWD/GPP/W/ECC and so on.  </p>
</li>
</ul>
</li>
</ul>
<h3 id="SCENE-SIMULATION"><a href="#SCENE-SIMULATION" class="headerlink" title="SCENE SIMULATION"></a>SCENE SIMULATION</h3><p><strong>  One of methods for reducing these uncertainties and better aiding decision-making is to use results from multiple assessment under different possible scenarios.Based on the current socio-economic conditions in 2010, the water demands of seven provinces within the Loess Plateau during 2030s (i.e., 2030-2039) ~ 2090s are estimated.</strong></p>
<ul>
<li><p><strong>Function</strong></p>
<ul>
<li><p>The IPSL-CM5A-LR (IPSL) and HadGEM2-ES (HadGEM2) models are projected to decrease, which are primarily driven by that in northwestern and southeastern parts, respectively. By contrast, all GCMs project an increase in ecosystem use efficiency (WUE), with an average value of 14%. </p>
</li>
<li><p>With the climate change under RCP scenario during future periods and the growing water demand of socio-economic development, future potential ECC is further explored. </p>
</li>
<li><p>Although two models project a decreased precipitation, the increased carbon uptake per unit of water use, i.e. WUE, compensate this effect, and thus all GCMs produce an increased ECC compared with that over 1982-2012.</p>
</li>
</ul>
</li>
<li><p><strong>Operation Steps</strong></p>
<ul>
<li>Selection <code>Mession</code>, the results of each task are different, this function is to evaluate and analyze future capacity of the selected task.</li>
<li>Not open to the social economy water parameter adjustment .</li>
<li>There are four schema and five scenerio, some scenarios not.</li>
<li>There are there statistics: spatial analysis, statistical analysis, assessment</li>
<li><code>spatial analysis</code> : Include ECC/WUE relative change rate/Precipitation relative change rate spatial pattern in different scenerio or schema and periods.</li>
<li><code>statistical analysis</code> : Include ECC/WUE relative change rate/Precipitation relative change rate statistic in different scenerio or schema and periods.</li>
<li><code>assessment</code> : Main W spatial pattern in different scenerio or schema and periods.</li>
</ul>
</li>
</ul>
<h3 id="SPACIAL-ANALYSIS"><a href="#SPACIAL-ANALYSIS" class="headerlink" title="SPACIAL ANALYSIS"></a>SPACIAL ANALYSIS</h3><p><strong>  In this module, users can make a comparison between different basins, counties or geomorphologic landscapes for the same variables (e.g. precipitation, GPP and ECC). This progress is easily achieved through checking the corresponding parameters that the users are interested in, and this function is good for researchers to fully understand the spatial heterogeneity and its reasons.</strong></p>
<ul>
<li><p><strong>Function</strong></p>
<ul>
<li><p>ECCAS uses a variety of classical statistical methods, such as correlation analysis and trend analysis, to analyze changes in ECC and its controlling factors. Spatial data are stored in a variety of forms, and they may not be integrated because of the influence of various factors, such as the coordinate system and the bearing medium. </p>
</li>
<li><p>ECCAS can provide users with capabilities of heterogeneous geophysical data analysis, including data accurate extraction from high-resolution remote sensing image, and tendencies detection in the framework of different multidisciplinary researches. </p>
</li>
<li><p>Using ECCAS even unskilled user without specific knowledge can perform compute ational processing and visualization of field observation as well as satellite monitoring datas ets through unified graphical web-interface.</p>
</li>
</ul>
</li>
<li><p><strong>Operation Steps</strong></p>
<ul>
<li><code>Mission Selection</code>: Determined to analyze the task of computing task results including the history and future, this analysis mainly involves the historical data.</li>
<li><code>Region Selection</code>: Select the desired analysis for regional, ‘river_station’ for basion name, and the county name directly.</li>
<li><code>Variable Selection</code>: The user can choose different time scale (<code>year</code>,<code>month</code>,<code>day</code>), choose different start time and end time, choose each parameter and click <code>Add</code>, or chosse all with take <code>Add All</code>. Then click the button <code>Analysis</code>.</li>
<li>Use <code>region name</code> in different colors to decide it display or not.</li>
<li>The top two charts for the task of ecosystem capacity and ecosystem capacity capacity evaluation, spatial mean value and sequence in different regions.</li>
<li>Below charts are spatial mean value and time sequence in the selected parameters.</li>
</ul>
</li>
</ul>
<br>
<br>

<h2 id="RELEVANT-DATA-DESCRIPTION"><a href="#RELEVANT-DATA-DESCRIPTION" class="headerlink" title="RELEVANT DATA DESCRIPTION"></a>RELEVANT DATA DESCRIPTION</h2><ul>
<li>Geomorphic regionalization data of the Loess Plateau<ul>
<li><a href="http://www.gov.cn/zwgk/2011-01/17/content_1786454.htm">Notice on the publication of the outline of the comprehensive management plan for the Loess Plateau Region (2010s-2030s)</a>.</li>
</ul>
</li>
</ul>
<h2 id="RELATED-LINKS"><a href="#RELATED-LINKS" class="headerlink" title="RELATED LINKS"></a>RELATED LINKS</h2><ul>
<li><p><a href="">papers</a></p>
</li>
<li><p><a href="https://117.34.95.115/ccas">System html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>系统设计</tag>
        <tag>黄土高原</tag>
        <tag>软件开发</tag>
      </tags>
  </entry>
</search>
